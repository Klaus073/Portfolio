name: Build and Deploy

on:
  push:
    branches: [ "main" ]

concurrency:
  group: deploy-main
  cancel-in-progress: true

env:
  REGISTRY_URL: ${{ vars.REGISTRY_URL }}
  IMAGE_NAME: ${{ vars.IMAGE_NAME }}
  EC2_APP_DIR: ${{ vars.EC2_APP_DIR }}

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Resolve credentials and targets (Secrets -> Vars fallback)
        shell: bash
        run: |
          set -euo pipefail
          # Registry creds
          if [ -n "${{ secrets.REGISTRY_USERNAME }}" ]; then echo "REGISTRY_USERNAME=${{ secrets.REGISTRY_USERNAME }}" >> "$GITHUB_ENV"; else echo "REGISTRY_USERNAME=${{ vars.REGISTRY_USERNAME }}" >> "$GITHUB_ENV"; fi
          if [ -n "${{ secrets.REGISTRY_PASSWORD }}" ]; then echo "REGISTRY_PASSWORD=${{ secrets.REGISTRY_PASSWORD }}" >> "$GITHUB_ENV"; else echo "REGISTRY_PASSWORD=${{ vars.REGISTRY_PASSWORD }}" >> "$GITHUB_ENV"; fi
          # EC2 creds
          if [ -n "${{ secrets.EC2_HOST }}" ]; then echo "EC2_HOST=${{ secrets.EC2_HOST }}" >> "$GITHUB_ENV"; else echo "EC2_HOST=${{ vars.EC2_HOST }}" >> "$GITHUB_ENV"; fi
          if [ -n "${{ secrets.EC2_USER }}" ]; then echo "EC2_USER=${{ secrets.EC2_USER }}" >> "$GITHUB_ENV"; else echo "EC2_USER=${{ vars.EC2_USER }}" >> "$GITHUB_ENV"; fi
          if [ -n "${{ secrets.EC2_SSH_KEY }}" ]; then echo "EC2_SSH_KEY=${{ secrets.EC2_SSH_KEY }}" >> "$GITHUB_ENV"; else echo "EC2_SSH_KEY=${{ vars.EC2_SSH_KEY }}" >> "$GITHUB_ENV"; fi

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to container registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY_URL }}
          username: ${{ env.REGISTRY_USERNAME }}
          password: ${{ env.REGISTRY_PASSWORD }}

      - name: Build and push Docker image
        uses: docker/build-push-action@v6
        with:
          context: .
          file: ./Dockerfile
          push: true
          tags: |
            ${{ env.REGISTRY_URL }}/${{ env.IMAGE_NAME }}:latest
            ${{ env.REGISTRY_URL }}/${{ env.IMAGE_NAME }}:${{ github.sha }}
          cache-from: type=registry,ref=${{ env.REGISTRY_URL }}/${{ env.IMAGE_NAME }}:buildcache
          cache-to: type=registry,ref=${{ env.REGISTRY_URL }}/${{ env.IMAGE_NAME }}:buildcache,mode=max

      - name: Deploy on EC2 via SSH and run compose
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ env.EC2_HOST }}
          username: ${{ env.EC2_USER }}
          key: ${{ env.EC2_SSH_KEY }}
          envs: EC2_APP_DIR,REGISTRY_URL,IMAGE_NAME,REGISTRY_USERNAME,REGISTRY_PASSWORD
          script_stop: true
          command_timeout: 30m
          script: |
            set -euo pipefail
            cd "$EC2_APP_DIR"
            export IMAGE="$REGISTRY_URL/$IMAGE_NAME"
            # Compose should reference image as ${IMAGE}:${IMAGE_TAG}
            export IMAGE_TAG=latest
            docker login "$REGISTRY_URL" -u "$REGISTRY_USERNAME" -p "$REGISTRY_PASSWORD"
            docker compose pull
            docker compose up -d --remove-orphans
            docker image prune -af


