name: Build and Deploy

on:
  push:
    branches: [ "main" ]

concurrency:
  group: deploy-main
  cancel-in-progress: true

env:
  REGISTRY_URL: ${{ vars.REGISTRY_URL }}
  EC2_APP_DIR: /home/ubuntu/Ui-Protfolio

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Resolve EC2 credentials (Secrets -> Vars fallback)
        shell: bash
        run: |
          set -euo pipefail
          # EC2 creds
          if [ -n "${{ secrets.EC2_HOST }}" ]; then echo "EC2_HOST=${{ secrets.EC2_HOST }}" >> "$GITHUB_ENV"; else echo "EC2_HOST=${{ vars.EC2_HOST }}" >> "$GITHUB_ENV"; fi
          if [ -n "${{ secrets.EC2_USER }}" ]; then echo "EC2_USER=${{ secrets.EC2_USER }}" >> "$GITHUB_ENV"; else echo "EC2_USER=${{ vars.EC2_USER }}" >> "$GITHUB_ENV"; fi
          if [ -n "${{ secrets.EC2_SSH_KEY }}" ]; then
            echo 'EC2_SSH_KEY<<EOF' >> "$GITHUB_ENV"
            printf '%s\n' "${{ secrets.EC2_SSH_KEY }}" >> "$GITHUB_ENV"
            echo 'EOF' >> "$GITHUB_ENV"
          else
            echo 'EC2_SSH_KEY<<EOF' >> "$GITHUB_ENV"
            printf '%s\n' "${{ vars.EC2_SSH_KEY }}" >> "$GITHUB_ENV"
            echo 'EOF' >> "$GITHUB_ENV"
          fi

      - name: Resolve REGISTRY_URL (Secrets -> Vars fallback)
        shell: bash
        run: |
          set -euo pipefail
          if [ -n "${{ secrets.REGISTRY_URL }}" ]; then echo "REGISTRY_URL=${{ secrets.REGISTRY_URL }}" >> "$GITHUB_ENV"; else echo "REGISTRY_URL=${{ vars.REGISTRY_URL }}" >> "$GITHUB_ENV"; fi

      - name: Validate registry url
        shell: bash
        run: |
          set -euo pipefail
          if [ -z "${REGISTRY_URL:-}" ]; then
            echo "REGISTRY_URL is required (e.g., 10.0.0.1:5000 or myregistry.local:5000)" >&2
            exit 1
          fi

      - name: Create BuildKit config for insecure registry
        id: buildkit_config
        shell: bash
        run: |
          set -euo pipefail
          REG_URL="${REGISTRY_URL}"
          REG_HOSTPORT="${REG_URL#http://}"
          REG_HOSTPORT="${REG_HOSTPORT#https://}"
          REG_HOSTPORT="${REG_HOSTPORT%%/*}"
          CFG="$RUNNER_TEMP/buildkit.toml"
          {
            echo "[registry.\"$REG_HOSTPORT\"]"
            echo "  http = true"
            echo "  insecure = true"
          } > "$CFG"
          echo "config_path=$CFG" >> "$GITHUB_OUTPUT"

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        with:
          config: ${{ steps.buildkit_config.outputs.config_path }}

      # No registry login; pushing to insecure/unauthenticated registry

      - name: Build and push Docker image
        uses: docker/build-push-action@v6
        with:
          context: ./portfolio-app
          file: ./portfolio-app/Dockerfile
          push: true
          tags: |
            ${{ env.REGISTRY_URL }}/portfolio-app:latest
            ${{ env.REGISTRY_URL }}/portfolio-app:${{ github.sha }}
          cache-from: type=registry,ref=${{ env.REGISTRY_URL }}/portfolio-app:buildcache
          cache-to: type=registry,ref=${{ env.REGISTRY_URL }}/portfolio-app:buildcache,mode=max

      - name: Deploy on EC2 via SSH and run compose
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ env.EC2_HOST }}
          username: ${{ env.EC2_USER }}
          key: ${{ env.EC2_SSH_KEY }}
          envs: EC2_APP_DIR,REGISTRY_URL
          script_stop: true
          command_timeout: 30m
          script: |
            set -euo pipefail
            # Ensure EC2 docker allows insecure registry
            REG_URL="$REGISTRY_URL"
            REG_HOSTPORT="${REG_URL#http://}"
            REG_HOSTPORT="${REG_HOSTPORT#https://}"
            REG_HOSTPORT="${REG_HOSTPORT%%/*}"
            sudo mkdir -p /etc/docker
            echo "{\"insecure-registries\":[\"$REG_HOSTPORT\"]}" | sudo tee /etc/docker/daemon.json >/dev/null
            sudo systemctl restart docker || true
            cd "$EC2_APP_DIR"
            export IMAGE="$REGISTRY_URL/portfolio-app"
            # Compose should reference image as ${IMAGE}:${IMAGE_TAG}
            export IMAGE_TAG=latest
            docker compose pull
            docker compose up -d --remove-orphans
            docker image prune -af


